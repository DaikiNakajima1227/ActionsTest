'use strict';
importPackage(dw.svc);

const constants = require('*/cartridge/scripts/services/externalServicesConstants');
const Request = require('*/cartridge/scripts/services/oms/Request'); // eslint-disable-line no-unused-vars
const callback = require('*/cartridge/scripts/services/oms/customer/callback');

/**
 * @module omsCustomerService
 */
module.exports = {
    /**
     * Retrieve a customer.
     * @param {Request} request Parameters
     * @param {Object} args data.
     * @returns {Object} Result of the service.
     */
    getCustomer: function (request, args) {
        const serviceName = constants.oms.customer.get;
        const service = LocalServiceRegistry.createService(serviceName, callback.getCustomer);

        request.normalizeUrl(service.getURL());
        request.generateHeaders();
        request.setData(args);
        return service.call(request);
    },
    /**
     * Register a customer.
     * @param {Request} request Parameters
     * @param {Object} args data.
     * @returns {Object} Result of the service.
     */
    registerCustomer: function (request, args) {
        const serviceName = constants.oms.customer.register;
        const service = LocalServiceRegistry.createService(serviceName, callback.registerCustomer);

        request.normalizeUrl(service.getURL());
        request.generateHeaders();
        request.setData(args);
        return service.call(request);
    },
    updateCustomer: function (request, args) {
        const serviceName = constants.oms.customer.update;
        const service = LocalServiceRegistry.createService(serviceName, callback.updateCustomer);

        request.normalizeUrl(service.getURL());
        request.generateHeaders();
        request.setData(args);
        return service.call(request);
    },
    /**
     * Retrieve a customer address.
     * @param {Request} request Parameters
     * @param {Object} args data.
     * @returns {Object} Result of the service.
     */
    getCustomerAddress: function (request, args) {
        const serviceName = constants.oms.customer.address.get;
        const service = LocalServiceRegistry.createService(serviceName, callback.getCustomerAddress);

        request.normalizeUrl(service.getURL());
        request.generateHeaders();
        request.setData(args);
        return service.call(request);
    },
    /**
     * Retrieve a customer address.
     * @param {Request} request Parameters
     * @param {Object} args data.
     * @returns {Object} Result of the service.
     */
    updateCustomerAddress: function (request, args) {
        const serviceName = constants.oms.customer.address.update;
        const service = LocalServiceRegistry.createService(serviceName, callback.updateCustomerAddress);

        request.normalizeUrl(service.getURL());
        request.generateHeaders();
        request.setData(args);
        return service.call(request);
    },

}
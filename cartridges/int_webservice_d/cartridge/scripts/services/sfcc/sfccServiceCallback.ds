'use strict';
importPackage(dw.svc);
/**
 * This module implement the callback to be used when calling the service.
 * @module omsCustomerServiceCallback
 */

const preferences = require('dw/system/Site').getCurrent().getPreferences();
const Logger = require('dw/system/Logger');

module.exports = {
    /**
     * Retrieve a customer detail.
     */
    get: {
        /**
         * Creates a request object to be used when calling the service
         * @param {Service} svc Service being executed
         * @param {Object} args Parameters
         * @param {String} args.url The URL to override the original set on the Service Profile.
         * @param {String} args.httpMethod The HTTP method set on the request
         * @param {Array<headers>} args.headers Array containing all the necessary headers for the request
         * @returns {Object} Request object to give to the execute method.
         */
        createRequest: function (svc : HTTPService, args) {
            svc.setURL(args.url);
            svc.setRequestMethod(args.httpMethod);

            return;
        },
        /**
         * Creates a response object from a successful service call.
         * @param {Service} svc Service being executed.
         * @param {Object} response Service-specific response object.
         * @returns {Object} Object to return in the service call's Result.
         */
        parseResponse: function (svc : HTTPService, client: HTTPClient) {
            return client.text;
        },
        filterLogMessage: function (msg) {
            return msg;
        },
        mockCall: function (svc : HTTPService, args) {
            //var key = preferences.custom.amazonAuthorizationKey;
            svc.setRequestMethod('POST');

            //svc.addHeader('authorization', key);
            let mockedResponse = {
                common_response_info : {
                    result_code: '000',
                    message: '正常終了',
                    format_error: ''
                },
                login_info: {
                    guid: '8C2EB1C0-13SD-XXXXXXXXXXXXXXXXXX'
                }
            };
            return {
                statusCode: 200,
                statusMessage: "Success",
                text: JSON.stringify(mockedResponse)
            };
        }
    }
};
